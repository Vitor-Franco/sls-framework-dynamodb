org: <org-name>
service: <service-name>

plugins:
  - serverless-esbuild

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:UpdateItem
          Resource:
            - !GetAtt ProductsTable.Arn
            # !GetAtt Resgata informações do próprio template

package:
  individually: true

build:
  esbuild: false

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: false
    exclude:
      - '@aws-sdk/*'
    target: node20
    concurrency: 10

functions:
  listProduct:
    handler: src/functions/listProducts.handler
    events: 
      - httpApi:
          path: /products
          method: GET
  getProduct:
    handler: src/functions/getProduct.handler
    events: 
      - httpApi:
          path: /products/{productId}
          method: GET
  createProduct:
    handler: src/functions/createProduct.handler
    events: 
      - httpApi:
          path: /products
          method: POST
  updateProduct:
    handler: src/functions/updateProduct.handler
    events: 
      - httpApi:
          path: /products/{productId}
          method: PUT
  deleteProduct:
    handler: src/functions/deleteProduct.handler
    events: 
      - httpApi:
          path: /products/{productId}
          method: DELETE

# Recursos inseridos manualmente pela gente
# Usando como referência a documentação do CloudFormation
# Para criar serviços dentro da AWS
resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ProductsTable
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH